<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AP Computer Science</title>
    <description></description>
    <link>http://bsk.education/AP-CSP/AP-CSP/</link>
    <atom:link href="http://bsk.education/AP-CSP/AP-CSP/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 24 Oct 2016 21:17:49 -0400</pubDate>
    <lastBuildDate>Mon, 24 Oct 2016 21:17:49 -0400</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>üåê Hello, internet!</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://static01.nyt.com/images/2016/05/25/us/25xp-internet/25xp-internet-superJumbo-v4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Oct 2016 21:09:00 -0400</pubDate>
        <link>http://bsk.education/AP-CSP/AP-CSP/unit%202/2016/10/24/hello-internet.html</link>
        <guid isPermaLink="true">http://bsk.education/AP-CSP/AP-CSP/unit%202/2016/10/24/hello-internet.html</guid>
        
        
        <category>Unit 2</category>
        
      </item>
    
      <item>
        <title>üåÖ Poster, Child</title>
        <description>&lt;p&gt;If you‚Äôve finished your &lt;a href=&quot;http://bsk.education/AP-CSP/2016/10/17/create-drawing-app.html&quot;&gt;AP Create&lt;/a&gt; responses, use this time to review your p5 skills and create a poster about one of the seven &lt;strong&gt;Big Ideas&lt;/strong&gt;  in AP Computer Science:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Creativity&lt;/li&gt;
  &lt;li&gt;Abstraction&lt;/li&gt;
  &lt;li&gt;Data&lt;/li&gt;
  &lt;li&gt;Algorithms&lt;/li&gt;
  &lt;li&gt;Programming&lt;/li&gt;
  &lt;li&gt;The Internet&lt;/li&gt;
  &lt;li&gt;Global Impact&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1DFM-CFQSqz75Z2fEFI4TV6YZoPAK9ihD2cHkxtkIexQ/edit#slide=id.g1686c26918_1_5&quot;&gt;Examples&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Oct 2016 13:48:00 -0400</pubDate>
        <link>http://bsk.education/AP-CSP/AP-CSP/2016/10/23/poster-child.html</link>
        <guid isPermaLink="true">http://bsk.education/AP-CSP/AP-CSP/2016/10/23/poster-child.html</guid>
        
        
      </item>
    
      <item>
        <title>üñå Create: Drawing App</title>
        <description>&lt;h2 id=&quot;do-now-in-span-stylecolor-ed1f5ep5span&quot;&gt;Do Now (in &lt;span style=&quot;color: #ED1F5E&quot;&gt;p5&lt;/span&gt;)&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Make an &lt;code class=&quot;highlighter-rouge&quot;&gt;ellipse()&lt;/code&gt; that follows your mouse.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Before&lt;/strong&gt; your &lt;code class=&quot;highlighter-rouge&quot;&gt;ellipse()&lt;/code&gt;, add this line:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mouseIsPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What happened? Why do you think that‚Äôs happening?&lt;/p&gt;

&lt;h2 id=&quot;conditionals-with-interaction&quot;&gt;Conditionals with interaction&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;if‚Ä¶then‚Ä¶&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In &lt;span style=&quot;color: #ED1F5E&quot;&gt;p5&lt;/span&gt;, conditionals look a lot like JavaScript:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mouseIsPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pmouseX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pmouseY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mouseX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mouseY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Check:&lt;/strong&gt; What do you think &lt;code class=&quot;highlighter-rouge&quot;&gt;pmouseX&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;pmouseY&lt;/code&gt; are?&lt;/p&gt;

&lt;h2 id=&quot;drawing-in-multiple-colors&quot;&gt;Drawing in Multiple Colors&lt;/h2&gt;

&lt;p&gt;To use the keyboard to interact with my sketch, I need to add a new function. So far, we‚Äôve seen &lt;code class=&quot;highlighter-rouge&quot;&gt;function setup()&lt;/code&gt; which is called when the program starts, and &lt;code class=&quot;highlighter-rouge&quot;&gt;function draw()&lt;/code&gt; which runs on loop, forever.&lt;/p&gt;

&lt;p&gt;Now, we need &lt;code class=&quot;highlighter-rouge&quot;&gt;function keyTyped()&lt;/code&gt;, which is called every time a key is pressed.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keyTyped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;strokeColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;black&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;p&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;strokeColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;#E32173&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The variable &lt;code class=&quot;highlighter-rouge&quot;&gt;strokeColor&lt;/code&gt; is used inside my &lt;code class=&quot;highlighter-rouge&quot;&gt;function keyTyped()&lt;/code&gt;, and I am also going to use it inside my &lt;code class=&quot;highlighter-rouge&quot;&gt;function Draw()&lt;/code&gt;. that means I need to define it &lt;strong&gt;outside&lt;/strong&gt; of &lt;strong&gt;both&lt;/strong&gt; of those function. I can do this at the &lt;strong&gt;top&lt;/strong&gt; of my code:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;strokeColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;black&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is called &lt;em&gt;initializing&lt;/em&gt; a variable‚Äì giving it an &lt;em&gt;initial&lt;/em&gt; or starting value, which we will then change.&lt;/p&gt;

&lt;h2 id=&quot;drawing-app&quot;&gt;Drawing App&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Specification&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Points&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Your &lt;code class=&quot;highlighter-rouge&quot;&gt;canvas&lt;/code&gt; must resize to the window.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Draw with a &lt;code class=&quot;highlighter-rouge&quot;&gt;line()&lt;/code&gt; &lt;em&gt;in üåàmultiple colorsüåà&lt;/em&gt;.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Must be able to start &lt;strong&gt;and&lt;/strong&gt; stop drawing (‚Äúpen up‚Äù and ‚Äúpen down‚Äù)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Total:&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;__ / 3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;span-classmega-octicon-octicon-rocketspan-push-yourself-to-high&quot;&gt;&lt;span class=&quot;mega-octicon octicon-rocket&quot;&gt;&lt;/span&gt; Push yourself to HIGH!&lt;/h2&gt;

&lt;p&gt;üéÇ Draw me a birthday card!&lt;/p&gt;

&lt;p&gt;üåà Let the user choose colors using the keyboard. For example, if they press &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;, they start drawing in &lt;span style=&quot;color: blue; font-weight: bold&quot;&gt;blue&lt;/span&gt;. This could be where you:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;integrates two or more commonly used or new algorithms, and integrates mathematical and/or logical concepts to create a new algorithm.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‚å´ Let the user erase part of their drawing. There are a lot of ways to do this!   &lt;br /&gt;
üíÉüèº Have fun!&lt;/p&gt;
</description>
        <pubDate>Mon, 17 Oct 2016 12:59:00 -0400</pubDate>
        <link>http://bsk.education/AP-CSP/AP-CSP/unit%201:%20algorithms%20&%20p5/2016/10/17/create-drawing-app.html</link>
        <guid isPermaLink="true">http://bsk.education/AP-CSP/AP-CSP/unit%201:%20algorithms%20&%20p5/2016/10/17/create-drawing-app.html</guid>
        
        
        <category>Unit 1: Algorithms &amp; p5</category>
        
      </item>
    
      <item>
        <title>üö¶Stop &amp; Go &amp; Review</title>
        <description>&lt;h2 id=&quot;learning-targets&quot;&gt;Learning Targets&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;I can use Boolean conditions to determine which of  parts of an algorithm is used.&lt;/li&gt;
  &lt;li&gt;I can repeat of part of an algorithm until a condition is met or for a specified number of times.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;do-now-in-google-classroom&quot;&gt;Do Now (in Google Classroom)&lt;/h2&gt;
&lt;p&gt;Why isn‚Äôt the ellipse bouncing off the right edge of the screen? Can you fix it?&lt;/p&gt;

&lt;p&gt;Can you make the stroke weight change as the ellipse moves?&lt;/p&gt;

&lt;script type=&quot;text/p5&quot; data-autoplay=&quot;&quot; data-preview-width=&quot;400&quot; data-preview-height=&quot;&quot;&gt;
var x;
var y;
var xDirection = 1;
var yDirection = 1;
var speed = 10;

function setup() {
  createCanvas(windowWidth, windowHeight)
  x = random(0, width)
  y = random(0, height)
}

function draw() {

  background(&#39;#29BEEA&#39;)
  strokeWeight(3)
  stroke(&#39;#FFF400&#39;)
  // strokeWeight(5)
  fill(&#39;#FF4396&#39;)
  ellipse(x, y, 25, 25)

  x = x + xDirection * speed
  y = y + yDirection * speed
  if (x &gt;= width + 250 || x &lt;= 0) {
    xDirection = -xDirection
  } else if (y &gt;= height || y &lt;= 0) {
    yDirection = -yDirection
  }
}
&lt;/script&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;traffic-light&quot;&gt;Traffic Light&lt;/h2&gt;

&lt;p&gt;Create this ‚Äútraffic light‚Äù in p5:&lt;/p&gt;

&lt;iframe src=&quot;/AP-CSP/Code_Examples/TrafficLight&quot; width=&quot;100%&quot; height=&quot;400px&quot; style=&quot;border:solid 1px&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;strong&gt;Rubric&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Specification&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Points&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3 ellipses, each light up different colors&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;It must be able to ‚Äúlight‚Äù up in three different colors &lt;strong&gt;one at a time&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Only one light should be lit at a time&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Lights are &lt;strong&gt;conditionally&lt;/strong&gt; activated&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;It‚Äôs your choice how to activate the lights. Mine are based off &lt;code class=&quot;highlighter-rouge&quot;&gt;mouseY&lt;/code&gt;. You could use a click, &lt;code class=&quot;highlighter-rouge&quot;&gt;mouseX&lt;/code&gt;, your keyboard‚Ä¶whatever you want. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 14 Oct 2016 21:28:00 -0400</pubDate>
        <link>http://bsk.education/AP-CSP/AP-CSP/unit%201:%20algorithms%20&%20p5/2016/10/14/stop-go-review.html</link>
        <guid isPermaLink="true">http://bsk.education/AP-CSP/AP-CSP/unit%201:%20algorithms%20&%20p5/2016/10/14/stop-go-review.html</guid>
        
        
        <category>Unit 1: Algorithms &amp; p5</category>
        
      </item>
    
      <item>
        <title>üîÄ &lt;code&gt;else&lt;/code&gt; &amp; &lt;code&gt;else if&lt;/code&gt;</title>
        <description>&lt;h2 id=&quot;learning-targets&quot;&gt;Learning Targets&lt;/h2&gt;
&lt;p&gt;I can use &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;else if&lt;/code&gt; to create multiple conditions in a p5 sketch.&lt;/p&gt;

&lt;h2 id=&quot;else-if&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;else if&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Move your mouse across this sketch:&lt;/p&gt;
&lt;iframe src=&quot;/AP-CSP/Code_Examples/ElseAndElseIf&quot; width=&quot;500px&quot; height=&quot;500px&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;How many conditionals do I have?&lt;/p&gt;

&lt;p&gt;What‚Äôs &lt;strong&gt;wrong&lt;/strong&gt; with this one?&lt;/p&gt;

&lt;script type=&quot;text/p5&quot; data-autoplay=&quot;&quot; data-preview-width=&quot;300px&quot; data-preview-height=&quot;&quot;&gt;
var bgColor = &#39;white&#39;

function setup() {
  createCanvas(windowWidth, windowHeight)
}

function draw() {
  background(bgColor)
    // fill(bgColor);
    // ellipse(250,250,mouseY,mouseY)
  if (mouseX &lt; 4 * windowWidth / 5) {
    bgColor = &#39;#6638F0&#39;;
  } else if (mouseX &lt; 3 * windowWidth / 5) {
    bgColor = &#39;#890424&#39;;
  } else if (mouseX &lt; 2 * windowWidth / 5) {
    bgColor = &#39;#20C8B6&#39;;
  } else if (mouseX &lt; windowWidth / 5) {
    bgColor = &#39;#82BCFB&#39;;
  } else {
    bgColor = &#39;#E12874&#39;;
  }
}
&lt;/script&gt;

</description>
        <pubDate>Thu, 13 Oct 2016 11:50:00 -0400</pubDate>
        <link>http://bsk.education/AP-CSP/AP-CSP/unit%201:%20algorithms%20&%20p5/2016/10/13/else-else-if.html</link>
        <guid isPermaLink="true">http://bsk.education/AP-CSP/AP-CSP/unit%201:%20algorithms%20&%20p5/2016/10/13/else-else-if.html</guid>
        
        
        <category>Unit 1: Algorithms &amp; p5</category>
        
      </item>
    
      <item>
        <title>Make More Stuff Move</title>
        <description>&lt;h2 id=&quot;do-now-in-google-classroom&quot;&gt;Do Now (In Google Classroom)&lt;/h2&gt;
&lt;p&gt;What does it mean to &lt;strong&gt;initialize&lt;/strong&gt; a variable? Why do we need to do that when programming?
What does it mean to &lt;strong&gt;increment&lt;/strong&gt; a variable? What does it let us do?
Why should we pick meaningful names for variables in our code?&lt;/p&gt;

&lt;h2 id=&quot;from-the-ap&quot;&gt;From the AP:&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Program instructions may involve variables that are initialized and updated, read, and written  &lt;br /&gt;
Meaningful names for variables and procedures help people better understand programs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;back-to-bouncing&quot;&gt;Back to Bouncing&lt;/h2&gt;

&lt;iframe src=&quot;/AP-CSP/Code_Examples/ChangeColorBounce&quot; width=&quot;100%&quot; height=&quot;200px&quot; style=&quot;border:solid&quot;&gt;&lt;/iframe&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Specification&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Points&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Your &lt;code class=&quot;highlighter-rouge&quot;&gt;canvas&lt;/code&gt; must resize to the window.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;User created variables for &lt;code class=&quot;highlighter-rouge&quot;&gt;x position&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;y position&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;x direction&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;y direction&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Conditionals for the left/right and top/bottom edge of the screen&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;New Stuff!&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;!!&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Make your ellipse change color when it hits the edge&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Add another shape (&lt;code class=&quot;highlighter-rouge&quot;&gt;ellipse()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;triangle()&lt;/code&gt;) and make it move separately&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Extension&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;‚ú±&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;When a key is pressed either change the &lt;strong&gt;shape&lt;/strong&gt; or the &lt;strong&gt;size of the shape&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Ball bounces using only &lt;strong&gt;2&lt;/strong&gt; conditionals&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Total:&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;__ / 10&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Tue, 11 Oct 2016 17:36:00 -0400</pubDate>
        <link>http://bsk.education/AP-CSP/AP-CSP/unit%201:%20algorithms%20&%20p5/2016/10/11/make-more-stuff-move.html</link>
        <guid isPermaLink="true">http://bsk.education/AP-CSP/AP-CSP/unit%201:%20algorithms%20&%20p5/2016/10/11/make-more-stuff-move.html</guid>
        
        
        <category>Unit 1: Algorithms &amp; p5</category>
        
      </item>
    
      <item>
        <title>üîç Explore: Algorithms</title>
        <description>&lt;h1 id=&quot;ap-learning-targets&quot;&gt;üéØ AP Learning Targets&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;I explain how computing innovations affect communication, interaction, and cognition.&lt;/li&gt;
  &lt;li&gt;I explain how computing has impacted innovations in other fields.&lt;/li&gt;
  &lt;li&gt;I explain how programs implement algorithms.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;do-now-in-google-classroom&quot;&gt;Do Now (In Google Classroom)&lt;/h1&gt;
&lt;p&gt;Look at this image:
&lt;img src=&quot;https://static01.nyt.com/images/2016/08/01/opinion/01angwin/01angwin-superJumbo.jpg&quot; alt=&quot;&quot; /&gt;
What do you think it means?&lt;/p&gt;

&lt;h1 id=&quot;ap-explore-task&quot;&gt;AP Explore Task&lt;/h1&gt;
&lt;p&gt;We‚Äôre going to take a bit of a break from coding.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;From the AP:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AP Explore Guidelines&lt;/strong&gt;
&amp;gt; Computing innovations impact our lives in ways that require considerable study and reflection for us to fully understand them. In this performance task, you will explore a computing innovation of your choice. Your close examination of this computing innovation will deepen your understanding of computer science principles.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You will be provided with 8 hours of class time to develop, complete, and submit the following:
1. A computational artifact
2. Written responses (2a-2e).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;This performance task requires you to select and investigate a computational innovation that:
1. has had or has the potential to have significant beneficial and harmful effects on society, economy, or culture;
2. consumes, produces, and/or transforms data; and
3. raises at least one data storage concern, data privacy concern, or data security concern.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;your-task&quot;&gt;Your Task:&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;2c. Computing Innovation: Explain at least one beneficial effect and at least one harmful effect the computing innovation has had, or has the potential to have, on society, economy, or culture. (Approximately 250 words)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;üîó For each online source, include the permanent URL. Identify the author, title, source, the date you retrieved the source, and, if possible, the date the reference was written or posted&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.nytimes.com/2016/08/01/opinion/make-algorithms-accountable.html?nytmobile=0&quot;&gt;‚ÄúMake Algorithms Accountable‚Äù&lt;/a&gt; by Julia Angwin, The New York Times Op-Ed&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Oct 2016 10:59:00 -0400</pubDate>
        <link>http://bsk.education/AP-CSP/AP-CSP/unit%201:%20algorithms%20&%20p5/2016/10/06/explore-algorithms.html</link>
        <guid isPermaLink="true">http://bsk.education/AP-CSP/AP-CSP/unit%201:%20algorithms%20&%20p5/2016/10/06/explore-algorithms.html</guid>
        
        
        <category>Unit 1: Algorithms &amp; p5</category>
        
      </item>
    
      <item>
        <title>üîÇ Conditionals &amp; Variables</title>
        <description>&lt;h2 id=&quot;do-now-in-span-stylecolor-ed1f5ep5span&quot;&gt;Do Now (in &lt;span style=&quot;color: #ED1F5E&quot;&gt;p5&lt;/span&gt;)&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Create a canvas that is the size of the screen&lt;/li&gt;
  &lt;li&gt;Create a shape (&lt;code class=&quot;highlighter-rouge&quot;&gt;ellipse()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;rect()&lt;/code&gt;, etc) that follows your mouse&lt;/li&gt;
  &lt;li&gt;Write a conditional so that the &lt;code class=&quot;highlighter-rouge&quot;&gt;fill()&lt;/code&gt; of the shape changes if the mouse is on the &lt;strong&gt;left&lt;/strong&gt; or &lt;strong&gt;right&lt;/strong&gt; side of the screen.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Like this:&lt;/p&gt;

&lt;iframe src=&quot;/AP-CSP/Code_Examples/left_right/index.html&quot; width=&quot;100%&quot; height=&quot;200px&quot; style=&quot;border:none&quot;&gt;&lt;/iframe&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;conditionals--variables&quot;&gt;Conditionals &amp;amp; Variables&lt;/h2&gt;

&lt;p&gt;Our next challenge is to make a sketch where a &lt;del&gt;ball&lt;/del&gt; shape bounces around the screen.&lt;/p&gt;

&lt;p&gt;This is a more complicated than the sketches we‚Äôve done so far, because we will be &lt;strong&gt;defining&lt;/strong&gt; our own variables.&lt;/p&gt;

&lt;p&gt;To figure out what variables we need, think about what needs to &lt;strong&gt;change&lt;/strong&gt; so a shape looks like it‚Äôs bouncing. Let‚Äôs look at it:&lt;/p&gt;

&lt;iframe src=&quot;/AP-CSP/Code_Examples/Trumpoo&quot; width=&quot;100%&quot; height=&quot;200px&quot; style=&quot;border:solid&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;A pile of üí© moves across the screen. What changes?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;x position&lt;/code&gt; of the shape&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;y position&lt;/code&gt; of the shape&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, the üí© hits the edge of the screen. What changes?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;x direction&lt;/code&gt; ‚Äì if the shape hits the left edge, it should go right. If it hits the right edge, it should go left.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;y direction&lt;/code&gt; ‚Äì if the shape hits the top, it should start moving down. If it hits the bottom, it should start moving up.&lt;/li&gt;
&lt;/ol&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Specification&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Points&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Your &lt;code class=&quot;highlighter-rouge&quot;&gt;canvas&lt;/code&gt; must resize to the window.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;User created variables&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Conditionals for the left/right and top/bottom edge of the screen&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Extension&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;‚ú±&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Ball bounces using only &lt;strong&gt;2&lt;/strong&gt; conditionals&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Total:&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;__ / 5&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Tue, 27 Sep 2016 21:48:00 -0400</pubDate>
        <link>http://bsk.education/AP-CSP/AP-CSP/unit%201:%20algorithms%20&%20p5/2016/09/27/conditionals-variables.html</link>
        <guid isPermaLink="true">http://bsk.education/AP-CSP/AP-CSP/unit%201:%20algorithms%20&%20p5/2016/09/27/conditionals-variables.html</guid>
        
        
        <category>Unit 1: Algorithms &amp; p5</category>
        
      </item>
    
      <item>
        <title>‚úñ = Variables </title>
        <description>&lt;h1 id=&quot;part-1&quot;&gt;Part 1&lt;/h1&gt;

&lt;h2 id=&quot;do-now&quot;&gt;Do Now&lt;/h2&gt;
&lt;p&gt;What‚Äôs a variable?&lt;/p&gt;

&lt;h2 id=&quot;from-the-ap&quot;&gt;From the AP:&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Program instructions may involve variables that are initialized and updated, read, and written  &lt;br /&gt;
Meaningful names for variables and procedures help people better understand programs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;built-in-variables-in-span-stylecolor-ed1f5ep5span&quot;&gt;Built-in Variables in &lt;span style=&quot;color: #ED1F5E&quot;&gt;p5&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;We‚Äôve actually seen a few variables in p5 already.&lt;/p&gt;

&lt;p&gt;Look at the code below:&lt;/p&gt;

&lt;script type=&quot;text/p5&quot; data-autoplay=&quot;&quot; data-preview-width=&quot;300&quot; data-preview-height=&quot;&quot;&gt;
// This goes at the top of your code
function setup(){
    createCanvas(windowWidth,windowHeight)
}

function draw(){
background(&#39;white&#39;)
textSize(10)
text(&#39;Mouse X = &#39; + mouseX + &quot; | Mouse Y = &quot; + mouseY, 10, 10)
}
&lt;/script&gt;

&lt;p&gt;What are &lt;code class=&quot;highlighter-rouge&quot;&gt;mouseX&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;mouseY&lt;/code&gt; equal to? If you said ‚Äúit keeps changing!‚Äù you‚Äôre absolutely right. These are variables.&lt;/p&gt;

&lt;p&gt;Take a closer look at my code. How &lt;strong&gt;big&lt;/strong&gt; is my canvas? If you said ‚Äúit keeps changing!‚Äù you‚Ä¶get the idea. Also variables.&lt;/p&gt;

&lt;h3 id=&quot;exploring-variables&quot;&gt;Exploring variables&lt;/h3&gt;
&lt;p&gt;‚ú± Create a canvas that is the width and height of the window.&lt;/p&gt;

&lt;p&gt;‚ú± Draw a &lt;code class=&quot;highlighter-rouge&quot;&gt;line()&lt;/code&gt; from the &lt;strong&gt;top middle&lt;/strong&gt; of your screen (just below the camera) to your mouse cursor.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hint: you will need variables to create the canvas. How could use those same variables to find &lt;strong&gt;half&lt;/strong&gt; your screen?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It should look something like this:&lt;/p&gt;

&lt;script type=&quot;text/p5&quot; data-autoplay=&quot;&quot; data-preview-width=&quot;720&quot; data-preview-height=&quot;&quot;&gt;
function setup() {
  createCanvas(windowWidth,windowHeight)
}

function draw() {
  background(&#39;white&#39;)
  line(windowWidth/2,0,mouseX,mouseY)
}
&lt;/script&gt;

&lt;blockquote&gt;
  &lt;p&gt;Extend yourself! Give the line a different &lt;code class=&quot;highlighter-rouge&quot;&gt;stroke&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;strokeWeight&lt;/code&gt;  &lt;br /&gt;
Are you seeing a whole bunch of lines? How can you draw &lt;em&gt;only one&lt;/em&gt;?  &lt;br /&gt;
Can you ‚Äúhang‚Äù a rectangle off the end of the line?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;back-to-the-drawing-board-canvas&quot;&gt;Back to the &lt;del&gt;Drawing board&lt;/del&gt; Canvas&lt;/h3&gt;
&lt;p&gt;Go back to either your snowman or your own drawing, and add variables. But sure to use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;windowWidth&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;windowHeight&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mouseX&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mouseY&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;part-2&quot;&gt;Part 2&lt;/h1&gt;

&lt;h2 id=&quot;user-defined-variables&quot;&gt;üó£ User-defined variables&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Steps to make a variable&lt;/strong&gt;
@ the top of your code:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Declare (ex. &lt;code class=&quot;highlighter-rouge&quot;&gt;var xpos&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Initialize (ex. &lt;code class=&quot;highlighter-rouge&quot;&gt;var xpos = 50&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Use (ex. &lt;code class=&quot;highlighter-rouge&quot;&gt;ellipse(xpos, 100, 50, 50);&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;script type=&quot;text/p5&quot; data-autoplay=&quot;&quot; data-preview-width=&quot;&quot; data-preview-height=&quot;&quot;&gt;
var xpos = 50
// What happens if you change me?

function setup() {
	createCanvas(windowWidth, windowHeight)
}

function draw() {
	background(&#39;#FEF790&#39;)
	fill(&#39;#7F1AE5&#39;)
	ellipse(xpos, 50, 50, 50);
}
&lt;/script&gt;

</description>
        <pubDate>Sun, 25 Sep 2016 12:13:00 -0400</pubDate>
        <link>http://bsk.education/AP-CSP/AP-CSP/unit%201:%20algorithms%20&%20p5/2016/09/25/variables.html</link>
        <guid isPermaLink="true">http://bsk.education/AP-CSP/AP-CSP/unit%201:%20algorithms%20&%20p5/2016/09/25/variables.html</guid>
        
        
        <category>Unit 1: Algorithms &amp; p5</category>
        
      </item>
    
      <item>
        <title>üëæ + üëΩ + ü§ñ = Review</title>
        <description>&lt;h2 id=&quot;do-now&quot;&gt;Do Now&lt;/h2&gt;
&lt;p&gt;You know how to create a circle (&lt;code class=&quot;highlighter-rouge&quot;&gt;ellipse()&lt;/code&gt;), and you know how to create a rectangle (&lt;code class=&quot;highlighter-rouge&quot;&gt;rect()&lt;/code&gt;). How could you combine these two shapes to draw a &lt;strong&gt;semicircle&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;Like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/AP-CSP/images/halfcircle.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;design-your-own-character&quot;&gt;Design your own character&lt;/h2&gt;

&lt;p&gt;Using the &lt;span style=&quot;color: #ED1F5E&quot;&gt;p5&lt;/span&gt; graph paper, design your own character‚Äì either an alien üëΩ/üëæ or a robot ü§ñ.&lt;/p&gt;

&lt;h2 id=&quot;span-classmega-octicon-octicon-checkspan-meeting-standards&quot;&gt;&lt;span class=&quot;mega-octicon octicon-check&quot;&gt;&lt;/span&gt; Meeting Standards&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Planning graph paper indicates accurate pixel measurements.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Code corresponds to planning graph paper.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Code each of the following commands:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;‚ú± &lt;code class=&quot;highlighter-rouge&quot;&gt;rect()&lt;/code&gt;  &lt;br /&gt;
‚ú± &lt;code class=&quot;highlighter-rouge&quot;&gt;line()&lt;/code&gt;  &lt;br /&gt;
‚ú± &lt;code class=&quot;highlighter-rouge&quot;&gt;ellipse()&lt;/code&gt;  &lt;br /&gt;
‚ú± &lt;code class=&quot;highlighter-rouge&quot;&gt;fill()&lt;/code&gt;  &lt;br /&gt;
‚ú± &lt;code class=&quot;highlighter-rouge&quot;&gt;stroke()&lt;/code&gt;  &lt;br /&gt;
‚ú± &lt;code class=&quot;highlighter-rouge&quot;&gt;strokeWeight()&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;span-classmega-octicon-octicon-rocketspan-push-yourself-for-a-4&quot;&gt;&lt;span class=&quot;mega-octicon octicon-rocket&quot;&gt;&lt;/span&gt; Push yourself for a 4!&lt;/h2&gt;
&lt;p&gt;Display the &lt;code class=&quot;highlighter-rouge&quot;&gt;mouseX&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;mouseY&lt;/code&gt; on the screen while drawing:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// This goes at the top of your code&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;white&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;textSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Mouse X = &#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mouseX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; | Mouse Y = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mouseY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 23 Sep 2016 13:07:00 -0400</pubDate>
        <link>http://bsk.education/AP-CSP/AP-CSP/unit%201:%20algorithms%20&%20p5/2016/09/23/review.html</link>
        <guid isPermaLink="true">http://bsk.education/AP-CSP/AP-CSP/unit%201:%20algorithms%20&%20p5/2016/09/23/review.html</guid>
        
        
        <category>Unit 1: Algorithms &amp; p5</category>
        
      </item>
    
  </channel>
</rss>
